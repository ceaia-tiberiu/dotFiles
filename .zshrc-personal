alias c="clear"
alias cnm='find . -name "node_modules" -type d -prune -exec rm -rf '{}' +' # clears node_modules in folder/subfolders
alias envconf="vim ~/.zshrc-personal"
alias sites="cd ~/sites"
alias pac="sudo pacman -S"
alias pacup="sudo pacman -Syu"
alias vimconf="vim ~/.vimrc"
alias refresh='source ~/.zshrc; clear;'
alias p='lpass show -c -q --password -G';
alias cat='bat --paging=never'
alias v="vim"
alias pnx="pnpm run nx --"
alias myip='ifconfig | grep 0xffffff00'
#Disable autocorrect
unsetopt correct_all
unsetopt correct
DISABLE_CORRECTION="true"
# -= Tmux Settings =-
alias tas="tmux attach-session -t"
alias tat='tmux new-session -As $(basename "$PWD" | tr . -)' # will attach if session exists, or create a new session
alias ts="tmux new -s"
alias tl="tmux ls"
alias tr="tmux source-file ~/.tmux.conf"
alias tconf="vim ~/.tmux.conf"
alias tm="tmuxifier"
export PATH="$HOME/.tmuxifier/bin:$PATH"
export TMUXIFIER_LAYOUT_PATH="$HOME/Repo/dot/.tmux-layouts"
eval "$(tmuxifier init -)"

# -= Tmux end settings


# FileSearch
function f() { find . -iname "*$1*" ${@:2}; }
function r() { grep "$1" ${@:2} -R .; }

#mkdir and cd
function mkcd() { mkdir -p "$@" && cd "$_"; }

function dlog() { docker logs -f "$@"; }

# removes node modules
function rmnm(){
  find . -name 'node_modules' -type d -prune -exec rm -rf '{}' +
}

alias dcu="docker-compose up -d"
alias dcd="docker-compose down"

# -= Mongo Settings =-
mongoup() {
	cd ~/sites/mongodb/;
  dcu;
}
mongodn() {
	cd ~/sites/mongodb;
  dcd;
}
alias mbash="docker -it mongoDB bash"
alias mlog="docker logs mongoDB"
# -= End Mongo settings =-

alias dot="cd ~/Repo/dot"

# Make the `beginning/end` of line and `bck-i-search` commands work within tmux
 bindkey '^R' history-incremental-search-backward
 bindkey '^A' beginning-of-line
 bindkey '^E' end-of-line

 # Set Options {{{
 # # ===== Basics
 setopt no_beep # don't beep on error
 setopt interactive_comments # Allow comments even in interactive shells (especially for Muness)
 #
 # # ===== Changing Directories
 setopt auto_cd # If you type foo, and it isn't a command, and it is a directory in your cdpath, go there
 setopt cdablevarS # if argument to cd is the name of a parameter whose value is a valid directory, it will become the current directory
 setopt pushd_ignore_dups # don't push multiple copies of the same directory onto the directory stack
 #
 # # ===== Expansion and Globbing
 setopt extended_glob # treat #, ~, and ^ as part of patterns for filename generation
 #
 # # ===== History
 setopt append_history # Allow multiple terminal sessions to all append to one zsh command history
 setopt extended_history # save timestamp of command and duration
 setopt inc_append_history # Add comamnds as they are typed, don't wait until shell exit
 setopt hist_expire_dups_first # when trimming history, lose oldest duplicates first
 setopt hist_ignore_dups # Do not write events to history that are duplicates of previous events
 setopt hist_ignore_space # remove command line from history list when first character on the line is a space
 setopt hist_find_no_dups # When searching history don't display results already cycled through twice
 setopt hist_reduce_blanks # Remove extra blanks from each command line being added to history
 setopt hist_verify # don't execute, just expand history
 setopt share_history # imports new commands and appends typed commands to history
 #
 # # ===== Completion
 setopt always_to_end # When completing from the middle of a word, move the cursor to the end of the word
 setopt auto_menu # show completion menu on successive tab press. needs unsetop menu_complete to work
 setopt auto_name_dirs # any parameter that is set to the absolute name of a directory immediately becomes a name for that directory
 setopt complete_in_word # Allow completion from within a word/phrase
 #
 # unsetopt menu_complete # do not autoselect the first completion entry
 #
 # # ===== Correction
 setopt correct # spelling correction for commands
 setopt correctall # spelling correction for arguments
 #
 # # ===== Prompt
 setopt prompt_subst # Enable parameter expansion, command substitution, and arithmetic expansion in the prompt
 setopt transient_rprompt # only show the rprompt on the current prompt
 #
 # # ===== Scripts and Functions
 setopt multios # perform implicit tees or cats when multiple redirections are attempted
 # # }}}
 #
 # # Prompt {{{
 function virtualenv_info {
   [ $VIRTUAL_ENV ] && echo '('`basename $VIRTUAL_ENV`') '
 }

  function prompt_char {
   git branch >/dev/null 2>/dev/null && echo '±' && return
     hg root >/dev/null 2>/dev/null && echo '☿' && return
       echo '○'
 }
setopt promptsubst
autoload -U colors && colors # Enable colors in prompt

## Modify the colors and symbols in these variables as desired.
GIT_PROMPT_SYMBOL="%{$fg[blue]%}±"
GIT_PROMPT_PREFIX="%{$fg[green]%} [%{$reset_color%}"
GIT_PROMPT_SUFFIX="%{$fg[green]%}]%{$reset_color%}"
GIT_PROMPT_AHEAD="%{$fg[red]%}ANUM%{$reset_color%}"
GIT_PROMPT_BEHIND="%{$fg[cyan]%}BNUM%{$reset_color%}"
GIT_PROMPT_MERGING="%{$fg_bold[magenta]%}⚡︎%{$reset_color%}"
GIT_PROMPT_UNTRACKED="%{$fg_bold[red]%}u%{$reset_color%}"
GIT_PROMPT_MODIFIED="%{$fg_bold[yellow]%}m%{$reset_color%}"
GIT_PROMPT_STAGED="%{$fg_bold[green]%}s%{$reset_color%}"
#
## Show Git branch/tag, or name-rev if on detached head
function parse_git_branch() {
  (git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD) 2> /dev/null
}

# Show different symbols as appropriate for various Git repository states
 function parse_git_state() {
   # Compose this value via multiple conditional appends.
   local GIT_STATE=""

  local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
   if [ "$NUM_AHEAD" -gt 0 ]; then
       GIT_STATE=$GIT_STATE${GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}
   fi

 local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
 if [ "$NUM_BEHIND" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}
 fi

  local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
     GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING
  fi

  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
     GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED
  fi

  if ! git diff --quiet 2> /dev/null; then
     GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED
  fi

  if ! git diff --cached --quiet 2> /dev/null; then
     GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED
 fi

 if [[ -n $GIT_STATE ]]; then
   echo "$GIT_PROMPT_PREFIX$GIT_STATE$GIT_PROMPT_SUFFIX"
 fi
}

# If inside a Git repository, print its branch and state
function git_prompt_string() {
  local git_where="$(parse_git_branch)"
 [ -n "$git_where" ] && echo "on %{$fg[blue]%}${git_where#(refs/heads/|tags/)}$(parse_git_state)"
}

function current_pwd {
  echo $(pwd | sed -e "s,^$HOME,~,")
}

# Zsh Hooks {{{
 function precmd {
  # Put the string "hostname::/full/directory/path" in the title bar:
 echo -ne "\e]2;$PWD\a"

 # Put the parentdir/currentdir in the tab
 echo -ne "\e]1;$PWD:h:t/$PWD:t\a"
}

function set_running_app {
  printf "\e]1; $PWD:t:$(history $HISTCMD | cut -b7- ) \a"
}

function preexec {
   set_running_app
}

function postexec {
   set_running_app
}
if [ "$(uname 2> /dev/null)" == "Linux"  ]; then
  export PATH="$HOME/lsites/flutter/bin:$PATH"
  typeset -g POWERLEVEL9K_INSTANT_PROMPT=off
  source /usr/share/fzf/completion.zsh
  source /usr/share/fzf/key-bindings.zsh
fi
# source /usr/share/nvm/init-nvm.sh
export NVM_DIR="$HOME/.nvm"

[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
